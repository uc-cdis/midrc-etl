metadata:
  name: MLTest
  namespace: argo
spec:
  entrypoint: main
  templates:
    - name: download
    container:
      image: 'quay.io/cdis/midrc-etl:v3'
      command:
          - bash
          - '-c'
        args:
          - poetry run python /midrc-etl/mlanalysis/download.py -- {{workflow.name}};
        resources: {}
        imagePullPolicy: Always
      serviceAccountName: data-midrc-org-s3-full-access-serviceaccount
      automountServiceAccountToken: true
      podMetadata:
        annotations:
          gen3username: "osdominguez@uchicago.edu"

    - name: cleaning
    container:
      image: 'quay.io/cdis/midrc-etl:v3'
      command:
          - bash
          - '-c'
        args:
          - poetry run python /midrc-etl/mlanalysis/cleaning.py -- {{workflow.name}};
        resources: {}
        imagePullPolicy: Always
      serviceAccountName: data-midrc-org-s3-full-access-serviceaccount
      automountServiceAccountToken: true

    - name: conversion
    container:
      image: 'quay.io/cdis/midrc-etl:v3'
      command:
          - bash
          - '-c'
        args:
          - poetry run python /midrc-etl/mlanalysis/conversion.py -- {{workflow.name}};
        resources: {}
        imagePullPolicy: Always
      serviceAccountName: data-midrc-org-s3-full-access-serviceaccount
      automountServiceAccountToken: true

    - name: model1
    container:
      image: 'quay.io/cdis/midrc-etl:v3'
      command:
          - bash
          - '-c'
        args:
          - poetry run python /midrc-etl/mlanalysis/mlmodel1.py -- {{workflow.name}};
        resources: {}
        imagePullPolicy: Always
      serviceAccountName: data-midrc-org-s3-full-access-serviceaccount
      automountServiceAccountToken: true

    - name: model2
    container:
      image: 'quay.io/cdis/midrc-etl:v3'
      command:
          - bash
          - '-c'
        args:
          - poetry run python /midrc-etl/mlanalysis/mlmodel2.py -- {{workflow.name}};
        resources: {}
        imagePullPolicy: Always
      serviceAccountName: data-midrc-org-s3-full-access-serviceaccount
      automountServiceAccountToken: true

    - name: model3
    container:
      image: 'quay.io/cdis/midrc-etl:v3'
      command:
          - bash
          - '-c'
        args:
          - poetry run python /midrc-etl/mlanalysis/mlmodel3.py -- {{workflow.name}};
        resources: {}
        imagePullPolicy: Always
      serviceAccountName: data-midrc-org-s3-full-access-serviceaccount
      automountServiceAccountToken: true

    - name: model4
    container:
      image: 'quay.io/cdis/midrc-etl:v3'
      command:
          - bash
          - '-c'
        args:
          - poetry run python /midrc-etl/mlAnalysis/mlmodel4.py -- {{workflow.name}};
        resources: {}
        imagePullPolicy: Always
      serviceAccountName: data-midrc-org-s3-full-access-serviceaccount
      automountServiceAccountToken: true

    - name: compare
    container:
      image: 'quay.io/cdis/midrc-etl:v3'
      command:
          - bash
          - '-c'
        args:
          - poetry run python /midrc-etl/mlAnalysis/compare.py -- {{workflow.name}};
        resources: {}
        imagePullPolicy: Always
      serviceAccountName: data-midrc-org-s3-full-access-serviceaccount
      automountServiceAccountToken: true

    - name: main
      dag:
        tasks:
        - name: Download
          template: download

        - name: Cleaning
          depends: "Download"
          template: cleaning

        - name: Conversion
          depends: "Cleaning"
          template: conversion

        - name: MLM2
          depends: "Conversion"
          template: model1

        - name: MLM2
          depends: "Conversion"
          template: model2

        - name: MLM3
          depends: "Conversion"
          template: model3

        - name: MLM4
          depends: "Conversion"
          template: model4

        - name: Compare
          depends: "model1 && model2 && model3 && model4"
          template: compare

      serviceAccountName: data-midrc-org-s3-full-access-serviceaccount
      automountServiceAccountToken: true
  arguments: {}
